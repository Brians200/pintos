
CIS 520 - Programming Project #1
                   
---- GROUP ----

>> Fill in the names and email addresses of your group members.

Brian Sweeney <bsweeney@k-state.edu>
Brandon Davis <davisb@k-state.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for
>> the TA, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation,
>> course text, lecture notes, and course staff.


                 ALARM CLOCK
                 ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct thread
  {
    /* Owned by thread.c. */
    tid_t tid;                          /* Thread identifier. */
    enum thread_status status;          /* Thread state. */
    char name[16];                      /* Name (for debugging purposes). */
    uint8_t *stack;                     /* Saved stack pointer. */
    int priority;                       /* Priority. */
    struct list_elem allelem;           /* List element for all threads list. */

    /* Shared between thread.c and synch.c. */
    struct list_elem elem;              /* List element. */
    
    struct semaphore sema;
    struct list_elem timer_list_elem;
    int wakeup_time;

#ifdef USERPROG
    /* Owned by userprog/process.c. */
    uint32_t *pagedir;                  /* Page directory. */
#endif

    /* Owned by thread.c. */
    unsigned magic;                     /* Detects stack overflow. */
  };

Added timer_list_elem so it could be added to a wait_list
Added wakeup_time so we know when to wake it up
Added sema so the same semaphore can be used in timer_sleep() and timer_interrupt()

static struct list wait_list;
Holds all the sleeping threads




---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to your timer_sleep(),
>> including the effects of the timer interrupt handler.

We get the current thread. 
Set the threads wakeup_time = timer_ticks+ (input ticks) 
Insert the thread into wait_list
semadown using thread's semaphore

We turn off the interrupts around the the line where we insert the thread.

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

When the thread was inserted into wait_list, we insert it in a sorted list. So only have to check the first few elements of the list and not every single element.
Then we break when we find a thread that doesn't need woken up yet.


---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

We disable interrupts when we insert the thread into wait_list.


>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

They are avoided because interrupts are turned off during critical sections.


---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> other designs that you considered?

We received insight from the teacher about this approach. It avoids busy waiting so other threads can get more work done.


             PRIORITY SCHEDULING
             ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct thread
  {
    /* Owned by thread.c. */
    tid_t tid;                          /* Thread identifier. */
    enum thread_status status;          /* Thread state. */
    char name[16];                      /* Name (for debugging purposes). */
    uint8_t *stack;                     /* Saved stack pointer. */
    int priority;                       /* Priority. */
    struct list_elem allelem;           /* List element for all threads list. */

    /* Shared between thread.c and synch.c. */
    struct list_elem elem;              /* List element. */
    
    //we have added these
    struct semaphore sema;
    struct list_elem timer_list_elem;
    int64_t wakeup_time;
    int original_priority;
    //priority donation
    struct list locks;
    struct lock *blocked;
    bool donated;

#ifdef USERPROG
    /* Owned by userprog/process.c. */
    uint32_t *pagedir;                  /* Page directory. */
#endif

    /* Owned by thread.c. */
    unsigned magic;                     /* Detects stack overflow. */
  };

Purpose: Keep track of locks it holds, Lock that blocks it, whether it has been donated to, and original priority.

struct lock 
  {
    struct thread *holder;      /* Thread holding lock (for debugging). */
    struct semaphore semaphore; /* Binary semaphore controlling access. */

    struct list_elem holder_elem;
    int lock_priority;
  };

Purpose: List_elem so we can put it in a list. Lock_priority so we can track highest donation.

/* One semaphore in a list. */
struct semaphore_elem 
  {
    struct list_elem elem;              /* List element. */
    struct semaphore semaphore;         /* This semaphore. */
    
    //
    int priority;
  };

Purpose: Keeps track of priority when its used in cond_wait and sort_cond

>> B2: Explain the data structure used to track priority donation.

Threads have a list of locks and a blocking lock.  Locks have a highest donated priority.

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

We keep the waiters sorted by highest priority.

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

Lock_acquire calls donate_priority_lock.  The second argument is the lock holder. In our function, if it is not NULL, then we donate the priority.
We handle nested donation by looping through the threads that are blocking a thread and we set their priority to the donating priorities.

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

Lock_release sets the lock holder to null.  Sema_up is called with the lock's semaphore.  It sorts the waiters and unlocks the highest priority thread. Then take_back_priority is called, resetting the previous lock holder's priority.

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

When a priority gets donated and we are calling set_priority(), but there is a context switch and the priority isn't saved into the thread. So now the thread doesn't have the updated priority and priority donation will not work.
We disable interrupts before setting the priority and renabling them afterwards.
Yes

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

We started out by keeping track of what threads a certain thread donates to, but then we realized that that only worked if a thread had one lock.  
So we instead decided to keep a list of locks held by a thread.   

              ADVANCED SCHEDULER [EXTRA CREDIT]
              =================================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
 0
 4
 8
12
16
20
24
28
32
36

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?

